@{
    ViewData["Title"] = "Your Tasks";
    var userId = ViewData["UserId"];
}

<div class="container mt-5">
    <div class="d-flex justify-content-between">
        <h2>Your Tasks</h2>
        <!-- Logout button -->
        <button class="btn btn-danger" onclick="logout()">Logout</button>
    </div>

    <!-- Add task input -->
    <div class="input-group mt-4">
        <input type="text" id="newTaskInput" class="form-control" placeholder="Enter a new task" data-bind="value: newTask">
        <button class="btn btn-success" data-bind="click: addTask">Add</button>
    </div>

    <!-- Tasks list -->
    <div id="tasksContainer" class="mt-4">
        <!-- Task Rows -->
        <div class="row" data-bind="foreach: tasksInRows">
            <div class="col-md-4 mb-4" data-bind="foreach: $data">
                <!-- Task Card -->
                <div class="card">
                    <div class="card-body">
                        <!-- Task Name with Strike-through when done -->
                        <h5 class="card-title" data-bind="text: taskName, css: { 'text-decoration-line-through': status() }"></h5>

                        <div class="d-flex justify-content-between">
                            <!-- Mark as Done Button -->
                            <button class="btn btn-sm me-2"
                                    data-bind="click: function() { $parentContext.$parent.toggleTaskStatus($data) },
                                    visible: status() === false">
                                Mark as Done
                            </button>

                            <button class="btn btn-warning btn-sm me-2"
                                    data-bind="click: function() { $parentContext.$parent.toggleTaskStatus($data) },
                                    visible: status() === true">
                                Mark as Undone
                            </button>

                            <!-- Checkmark -->
                            <span class="text-success" data-bind="visible: status()">
                                <i class="bi bi-check-circle"></i> Done
                            </span>

                            <!-- Delete Button -->
                            <button class="btn btn-danger btn-sm"
                                    data-bind="click: function() {
                                    if (confirm('Are you sure you want to delete this task?')) {
                                    $parentContext.$parent.deleteTask($data);
                                    }
                                   }">
                                Delete
                            </button>

                            <!-- Edit Button -->
                            <button class="btn btn-primary btn-sm"
                                    data-bind="click: function() {
                                    $parentContext.$parent.startEditTask($data);
                                    $('#editTaskModal').modal('show');
                                    },
                                visible: status() === false">
                                Edit
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>


<!-- Edit Task Modal -->
<div class="modal fade" id="editTaskModal" tabindex="-1" aria-labelledby="editTaskModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="editTaskModalLabel">Edit Task</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <input type="text" class="form-control" placeholder="Edit task name" data-bind="value: editedTaskName">
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" data-bind="click: cancelEdit">Cancel</button>
                <button type="button" class="btn btn-primary" data-bind="click: updateTask">Save</button>
            </div>
        </div>
    </div>
</div>



<script src="https://cdnjs.cloudflare.com/ajax/libs/knockout/3.5.1/knockout.js"></script>
@* <script src="./js/TasksViewModel.js"></script> *@


 <script>

    // Knockout.js ViewModel to manage tasks
    function TaskViewModel() {
        var self = this;
        self.UserId = null;
        self.tasks = ko.observableArray([]); // Array to hold tasks
        self.newTask = ko.observable(""); // New task input value

            self.tasksInRows = ko.computed(function () {
                var rows = [];
                for (var i = 0; i < self.tasks().length; i += 3) {
                    rows.push(self.tasks().slice(i, i + 3)); // Group tasks into rows of 3
                }
                return rows;
            });

        
        // Observables for editing tasks
        self.isEditing = ko.observable(false); // To control visibility of the edit section
        self.editedTaskId = ko.observable(null); // ID of the task being edited
        self.editedTaskName = ko.observable(""); // Edited task name

        // Fetch tasks for the user
        self.fetchTasks = function (userId) {
            fetch(`/Task/GetTasksByUserId/${userId}`)
                .then(response => response.json())
                .then(data => {
                    if (Array.isArray(data)) {
                        // Map the data into task objects with taskName, id, and status
                        self.tasks(data.map(task => ({
                            taskName: task.taskName,
                            id: task.id,
                            status: ko.observable(task.status) // Ensure status is an observable

                        })));
                    }
                })

                .catch(error => console.error("Error fetching tasks:", error));

        };
        // Start editing a task
        self.startEditTask = function (task) {
            self.isEditing(true);
            self.editedTaskId(task.id);
            self.editedTaskName(task.taskName);
            $('#editTaskModal').modal('show');
        };
        // Cancel editing
        self.cancelEdit = function () {
            self.isEditing(false);
            self.editedTaskId(null);
            self.editedTaskName("");
            $('#editTaskModal').modal('hide'); // Close the modal
        };
        // Update a task
        self.updateTask = function (task) {
            var taskId = self.editedTaskId();
            var updatedTaskName = self.editedTaskName().trim();
            if (taskId && updatedTaskName) {
                fetch(`/Task/UpdateTask/${taskId}`, {
                    method: "PUT",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify({ id: taskId, taskName: updatedTaskName, userId: userId })
                })
                    .then(response => {
                        if (response.ok) {
                            // Update the task in the observable array

                            var taskToUpdate = self.tasks().find(task => task.id === taskId);
                            if (taskToUpdate) {
                                taskToUpdate.taskName = updatedTaskName;
                                self.fetchTasks(self.UserID);
                                // Notify Knockout about the update
                            }

                            // Clear editing state
                            self.cancelEdit();
                        } else {
                            alert("Error updating task.");
                        }
                    })
                    .catch(error => console.error("Error updating task:", error));
            } else {
                alert("Task name cannot be empty.");
            }
        };
        // Add a new task
        self.addTask = function () {
            var newTaskName = self.newTask().trim(); // Get the value of the new task
            if (newTaskName) {
                fetch(`/Task/PostTask/AddTasks`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ taskName: newTaskName, userId: userId })
                })
                    .then(response => response.json())
                    .then(data => {
                        var newTask = {
                            taskName: data.taskName,
                            id: data.id,
                            status: ko.observable(false) // Default status is false (not done)
                        };
                        self.tasks.push(newTask);
                        self.newTask(""); // Clear input
                    })
                    .catch(error => console.error('Error adding task:', error));
            } else {
                alert('Please enter a task.');
            }
        };

        // Toggle task status (Done/Undone)
        self.toggleTaskStatus = function (task) {
            fetch(`/Task/ToggleTaskStatus/toggle-status/${task.id}`, {
                method: "PUT",
                headers: { "Content-Type": "application/json" }
            })
                .then(response => {
                    if (response.ok) {
                        // Update the task's status in the observable
                        console.log(task.status());
                        if (task.status()) {
                            task.status(false);  // This will trigger Knockout.js to apply the binding and strike-through

                        }
                        else {
                            task.status(true);
                        }

                        // Optionally, refetch tasks to make sure the UI is synchronized with the database
                        // self.fetchTasks(self.UserID);
                    } else {
                        alert("Failed to update task status.");
                    }
                })
                .catch(error => console.error("Error toggling task status:", error));
        };

        // Delete a task
        self.deleteTask = function (task) {
            fetch(`/Task/DeleteTask/${task.id}`, {
                method: 'DELETE'
            })
                .then(response => {
                    if (response.ok) {
                        self.tasks.remove(task);
                    } else {
                        alert('Error deleting task');
                    }
                })
                .catch(error => console.error('Error deleting task:', error));
        };

        // Initialize and load tasks
        self.init = function (userId) {
            self.UserID = userId;
            self.fetchTasks(userId);
        };
    }

    // Initialize ViewModel and bind to view
    var viewModel = new TaskViewModel();
    var userId = @ViewData["UserId"];  // Dynamically pass userId from ViewData
    viewModel.init(userId);  // Fetch tasks for the user
    ko.applyBindings(viewModel); // Apply Knockout.js bindings

    // Logout function
    function logout() {
        if (confirm("Are you sure you want to log out?")) {
            window.location.href = "/User/Login"; // Redirect to login page
        }
    }
</script>
 

