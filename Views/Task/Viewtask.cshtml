@{
    ViewData["Title"] = "Your Tasks";
    var userId = ViewData["UserId"];
}

<div class="container mt-5">
    <div class="d-flex justify-content-between">
        <h2>Your Tasks</h2>
        <!-- Logout button -->
        <button class="btn btn-danger" onclick="logout()">Logout</button>
    </div>

    <!-- Add task input -->
    <div class="input-group mt-4">
        <input type="text" id="newTaskInput" class="form-control" placeholder="Enter a new task" data-bind="value: newTask">
        <button class="btn btn-success" data-bind="click: addTask">Add</button>
    </div>

    <!-- Tasks list -->
    <div id="tasksContainer" class="mt-4">
        <ul data-bind="foreach: tasks">
            <li>
                <span data-bind="text: taskName"></span>
            </li>
        </ul>
    </div>
</div>

<script src="https://cdnjs.cloudflare.com/ajax/libs/knockout/3.5.1/knockout.js"></script>

<script>
    // Knockout.js ViewModel to manage tasks
    function TaskViewModel() {
        var self = this;
        self.tasks = ko.observableArray([]); // Array to hold tasks
        self.newTask = ko.observable(""); // New task input value

        // Function to fetch tasks for the user
        self.fetchTasks = function (userId) {
            // Use template literals to embed userId dynamically in the URL
            fetch(`/Task/GetTasksByUserId/${userId}`)
                .then(response => response.json())
                .then(data => {
                    if (Array.isArray(data)) {
                        // Map the data into task objects with taskName
                        self.tasks(data.map(task => ({
                            taskName: task.taskName  // Assuming 'taskName' is the property of each task
                        })));
                    }
                })
                .catch(error => console.error("Error fetching tasks:", error));
        };


        // Function to add a new task
        self.addTask = function () {
            var newTaskName = self.newTask().trim(); // Get the value of the new task
            if (newTaskName) {
                // Add the new task to the tasks array
                self.tasks.push({ taskName: newTaskName });

                // Optionally, send the new task to the backend API for persistence
                fetch(`/Task/PostTask/AddTasks`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ taskName: newTaskName, userId: userId })
                })
                .then(response => response.json())
                .then(data => {
                    console.log('Task added:', data);
                })
                .catch(error => console.error('Error adding task:', error));

                // Clear the new task input
                self.newTask(""); 
            } else {
                alert('Please enter a task.');
            }
        };

        // Function to initialize and load tasks
        self.init = function (userId) {
            self.fetchTasks(userId);
        };
    }

    // Initialize the ViewModel and bind it to the view
    var viewModel = new TaskViewModel();
    var userId = @ViewData["UserId"];  // Dynamically pass the userId from ViewData
    viewModel.init(userId);  // Load tasks for the specified user

    // Apply Knockout.js bindings
    ko.applyBindings(viewModel);

    // Logout function to redirect to the Login page
    function logout() {
        if (confirm("Are you sure you want to log out?")) {
            window.location.href = "/User/Login"; // Redirect to login page
        }
    }
</script>
